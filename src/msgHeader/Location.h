// Generated by gencpp from file iau_ros_msgs/Location.msg
// DO NOT EDIT!


#ifndef IAU_ROS_MSGS_MESSAGE_LOCATION_H
#define IAU_ROS_MSGS_MESSAGE_LOCATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace iau_ros_msgs
{
template <class ContainerAllocator>
struct Location_
{
  typedef Location_<ContainerAllocator> Type;

  Location_()
    : timestamp()
    , gau_pos()
    , wgs84_pos()
    , orientation()
    , speed()
    , accelerate()
    , error()  {
      gau_pos.assign(0.0);

      wgs84_pos.assign(0.0);

      orientation.assign(0.0);

      speed.assign(0.0);

      accelerate.assign(0.0);

      error.assign(0.0);
  }
  Location_(const ContainerAllocator& _alloc)
    : timestamp()
    , gau_pos()
    , wgs84_pos()
    , orientation()
    , speed()
    , accelerate()
    , error()  {
  (void)_alloc;
      gau_pos.assign(0.0);

      wgs84_pos.assign(0.0);

      orientation.assign(0.0);

      speed.assign(0.0);

      accelerate.assign(0.0);

      error.assign(0.0);
  }



   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;

   typedef boost::array<double, 2>  _gau_pos_type;
  _gau_pos_type gau_pos;

   typedef boost::array<double, 3>  _wgs84_pos_type;
  _wgs84_pos_type wgs84_pos;

   typedef boost::array<float, 3>  _orientation_type;
  _orientation_type orientation;

   typedef boost::array<float, 3>  _speed_type;
  _speed_type speed;

   typedef boost::array<float, 3>  _accelerate_type;
  _accelerate_type accelerate;

   typedef boost::array<float, 2>  _error_type;
  _error_type error;





  typedef boost::shared_ptr< ::iau_ros_msgs::Location_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iau_ros_msgs::Location_<ContainerAllocator> const> ConstPtr;

}; // struct Location_

typedef ::iau_ros_msgs::Location_<std::allocator<void> > Location;

typedef boost::shared_ptr< ::iau_ros_msgs::Location > LocationPtr;
typedef boost::shared_ptr< ::iau_ros_msgs::Location const> LocationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iau_ros_msgs::Location_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iau_ros_msgs::Location_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace iau_ros_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'iau_ros_msgs': ['/home/z/iau_ws/src/iau_ros_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::iau_ros_msgs::Location_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iau_ros_msgs::Location_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iau_ros_msgs::Location_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iau_ros_msgs::Location_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iau_ros_msgs::Location_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iau_ros_msgs::Location_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iau_ros_msgs::Location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bc35a7b20796954693abecdcf3300dc0";
  }

  static const char* value(const ::iau_ros_msgs::Location_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbc35a7b207969546ULL;
  static const uint64_t static_value2 = 0x93abecdcf3300dc0ULL;
};

template<class ContainerAllocator>
struct DataType< ::iau_ros_msgs::Location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iau_ros_msgs/Location";
  }

  static const char* value(const ::iau_ros_msgs::Location_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iau_ros_msgs::Location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time       timestamp\n\
float64[2] gau_pos\n\
float64[3] wgs84_pos\n\
float32[3] orientation\n\
float32[3] speed\n\
float32[3] accelerate\n\
float32[2] error\n\
";
  }

  static const char* value(const ::iau_ros_msgs::Location_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iau_ros_msgs::Location_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.gau_pos);
      stream.next(m.wgs84_pos);
      stream.next(m.orientation);
      stream.next(m.speed);
      stream.next(m.accelerate);
      stream.next(m.error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Location_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iau_ros_msgs::Location_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iau_ros_msgs::Location_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
    s << indent << "gau_pos[]" << std::endl;
    for (size_t i = 0; i < v.gau_pos.size(); ++i)
    {
      s << indent << "  gau_pos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.gau_pos[i]);
    }
    s << indent << "wgs84_pos[]" << std::endl;
    for (size_t i = 0; i < v.wgs84_pos.size(); ++i)
    {
      s << indent << "  wgs84_pos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.wgs84_pos[i]);
    }
    s << indent << "orientation[]" << std::endl;
    for (size_t i = 0; i < v.orientation.size(); ++i)
    {
      s << indent << "  orientation[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.orientation[i]);
    }
    s << indent << "speed[]" << std::endl;
    for (size_t i = 0; i < v.speed.size(); ++i)
    {
      s << indent << "  speed[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.speed[i]);
    }
    s << indent << "accelerate[]" << std::endl;
    for (size_t i = 0; i < v.accelerate.size(); ++i)
    {
      s << indent << "  accelerate[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.accelerate[i]);
    }
    s << indent << "error[]" << std::endl;
    for (size_t i = 0; i < v.error.size(); ++i)
    {
      s << indent << "  error[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.error[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // IAU_ROS_MSGS_MESSAGE_LOCATION_H
