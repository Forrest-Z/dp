// Generated by gencpp from file iau_ros_msgs/GlobalMap.msg
// DO NOT EDIT!


#ifndef IAU_ROS_MSGS_MESSAGE_GLOBALMAP_H
#define IAU_ROS_MSGS_MESSAGE_GLOBALMAP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <iau_ros_msgs/PointXYAA.h>

namespace iau_ros_msgs
{
template <class ContainerAllocator>
struct GlobalMap_
{
  typedef GlobalMap_<ContainerAllocator> Type;

  GlobalMap_()
    : timestamp()
    , num(0)
    , path()  {
    }
  GlobalMap_(const ContainerAllocator& _alloc)
    : timestamp()
    , num(0)
    , path(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;

   typedef int32_t _num_type;
  _num_type num;

   typedef std::vector< ::iau_ros_msgs::PointXYAA_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::iau_ros_msgs::PointXYAA_<ContainerAllocator> >::other >  _path_type;
  _path_type path;





  typedef boost::shared_ptr< ::iau_ros_msgs::GlobalMap_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iau_ros_msgs::GlobalMap_<ContainerAllocator> const> ConstPtr;

}; // struct GlobalMap_

typedef ::iau_ros_msgs::GlobalMap_<std::allocator<void> > GlobalMap;

typedef boost::shared_ptr< ::iau_ros_msgs::GlobalMap > GlobalMapPtr;
typedef boost::shared_ptr< ::iau_ros_msgs::GlobalMap const> GlobalMapConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iau_ros_msgs::GlobalMap_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iau_ros_msgs::GlobalMap_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace iau_ros_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'iau_ros_msgs': ['/home/z/iau_ws/src/iau_ros_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::iau_ros_msgs::GlobalMap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iau_ros_msgs::GlobalMap_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iau_ros_msgs::GlobalMap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iau_ros_msgs::GlobalMap_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iau_ros_msgs::GlobalMap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iau_ros_msgs::GlobalMap_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iau_ros_msgs::GlobalMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aca066f08ba241864e7b4715ab107f73";
  }

  static const char* value(const ::iau_ros_msgs::GlobalMap_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaca066f08ba24186ULL;
  static const uint64_t static_value2 = 0x4e7b4715ab107f73ULL;
};

template<class ContainerAllocator>
struct DataType< ::iau_ros_msgs::GlobalMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iau_ros_msgs/GlobalMap";
  }

  static const char* value(const ::iau_ros_msgs::GlobalMap_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iau_ros_msgs::GlobalMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time        timestamp\n\
int32       num\n\
PointXYAA[] path\n\
\n\
================================================================================\n\
MSG: iau_ros_msgs/PointXYAA\n\
int32    id\n\
PointXYA point\n\
float64  attr\n\
\n\
================================================================================\n\
MSG: iau_ros_msgs/PointXYA\n\
float64 x\n\
float64 y\n\
float64 yaw  # degs\n\
";
  }

  static const char* value(const ::iau_ros_msgs::GlobalMap_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iau_ros_msgs::GlobalMap_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.num);
      stream.next(m.path);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GlobalMap_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iau_ros_msgs::GlobalMap_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iau_ros_msgs::GlobalMap_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
    s << indent << "num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num);
    s << indent << "path[]" << std::endl;
    for (size_t i = 0; i < v.path.size(); ++i)
    {
      s << indent << "  path[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::iau_ros_msgs::PointXYAA_<ContainerAllocator> >::stream(s, indent + "    ", v.path[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // IAU_ROS_MSGS_MESSAGE_GLOBALMAP_H
