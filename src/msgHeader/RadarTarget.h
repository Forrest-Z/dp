// Generated by gencpp from file iau_ros_msgs/RadarTarget.msg
// DO NOT EDIT!


#ifndef IAU_ROS_MSGS_MESSAGE_RADARTARGET_H
#define IAU_ROS_MSGS_MESSAGE_RADARTARGET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace iau_ros_msgs
{
template <class ContainerAllocator>
struct RadarTarget_
{
  typedef RadarTarget_<ContainerAllocator> Type;

  RadarTarget_()
    : timestamp()
    , target_id(0)
    , angle(0.0)
    , rangeRate(0.0)
    , rangeRateX(0.0)
    , rangeRateY(0.0)
    , accelerate(0.0)
    , accelerateX(0.0)
    , accelerateY(0.0)
    , range(0.0)
    , coorX(0.0)
    , coorY(0.0)
    , amplitude(0.0)  {
    }
  RadarTarget_(const ContainerAllocator& _alloc)
    : timestamp()
    , target_id(0)
    , angle(0.0)
    , rangeRate(0.0)
    , rangeRateX(0.0)
    , rangeRateY(0.0)
    , accelerate(0.0)
    , accelerateX(0.0)
    , accelerateY(0.0)
    , range(0.0)
    , coorX(0.0)
    , coorY(0.0)
    , amplitude(0.0)  {
  (void)_alloc;
    }



   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;

   typedef int32_t _target_id_type;
  _target_id_type target_id;

   typedef double _angle_type;
  _angle_type angle;

   typedef double _rangeRate_type;
  _rangeRate_type rangeRate;

   typedef double _rangeRateX_type;
  _rangeRateX_type rangeRateX;

   typedef double _rangeRateY_type;
  _rangeRateY_type rangeRateY;

   typedef double _accelerate_type;
  _accelerate_type accelerate;

   typedef double _accelerateX_type;
  _accelerateX_type accelerateX;

   typedef double _accelerateY_type;
  _accelerateY_type accelerateY;

   typedef double _range_type;
  _range_type range;

   typedef double _coorX_type;
  _coorX_type coorX;

   typedef double _coorY_type;
  _coorY_type coorY;

   typedef double _amplitude_type;
  _amplitude_type amplitude;





  typedef boost::shared_ptr< ::iau_ros_msgs::RadarTarget_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iau_ros_msgs::RadarTarget_<ContainerAllocator> const> ConstPtr;

}; // struct RadarTarget_

typedef ::iau_ros_msgs::RadarTarget_<std::allocator<void> > RadarTarget;

typedef boost::shared_ptr< ::iau_ros_msgs::RadarTarget > RadarTargetPtr;
typedef boost::shared_ptr< ::iau_ros_msgs::RadarTarget const> RadarTargetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iau_ros_msgs::RadarTarget_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iau_ros_msgs::RadarTarget_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace iau_ros_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'iau_ros_msgs': ['/home/z/iau_ws/src/iau_ros_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::iau_ros_msgs::RadarTarget_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iau_ros_msgs::RadarTarget_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iau_ros_msgs::RadarTarget_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iau_ros_msgs::RadarTarget_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iau_ros_msgs::RadarTarget_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iau_ros_msgs::RadarTarget_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iau_ros_msgs::RadarTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b912734b52bf10368481489124e1e506";
  }

  static const char* value(const ::iau_ros_msgs::RadarTarget_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb912734b52bf1036ULL;
  static const uint64_t static_value2 = 0x8481489124e1e506ULL;
};

template<class ContainerAllocator>
struct DataType< ::iau_ros_msgs::RadarTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iau_ros_msgs/RadarTarget";
  }

  static const char* value(const ::iau_ros_msgs::RadarTarget_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iau_ros_msgs::RadarTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time       timestamp\n\
int32      target_id\n\
float64      angle              #角度\n\
float64    rangeRate            #距离变化速率\n\
float64    rangeRateX           #X轴速度\n\
float64    rangeRateY           #Y轴加速度\n\
float64    accelerate           #加速度\n\
float64    accelerateX          #X轴加速度\n\
float64    accelerateY          #Y轴加速度\n\
float64    range                #目标的距离\n\
float64    coorX                #目标相对车体x方向位置\n\
float64    coorY                #目标相对车体y方向位置\n\
float64    amplitude            #目标状态 1表示动态目标\n\
";
  }

  static const char* value(const ::iau_ros_msgs::RadarTarget_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iau_ros_msgs::RadarTarget_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.target_id);
      stream.next(m.angle);
      stream.next(m.rangeRate);
      stream.next(m.rangeRateX);
      stream.next(m.rangeRateY);
      stream.next(m.accelerate);
      stream.next(m.accelerateX);
      stream.next(m.accelerateY);
      stream.next(m.range);
      stream.next(m.coorX);
      stream.next(m.coorY);
      stream.next(m.amplitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadarTarget_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iau_ros_msgs::RadarTarget_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iau_ros_msgs::RadarTarget_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
    s << indent << "target_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.target_id);
    s << indent << "angle: ";
    Printer<double>::stream(s, indent + "  ", v.angle);
    s << indent << "rangeRate: ";
    Printer<double>::stream(s, indent + "  ", v.rangeRate);
    s << indent << "rangeRateX: ";
    Printer<double>::stream(s, indent + "  ", v.rangeRateX);
    s << indent << "rangeRateY: ";
    Printer<double>::stream(s, indent + "  ", v.rangeRateY);
    s << indent << "accelerate: ";
    Printer<double>::stream(s, indent + "  ", v.accelerate);
    s << indent << "accelerateX: ";
    Printer<double>::stream(s, indent + "  ", v.accelerateX);
    s << indent << "accelerateY: ";
    Printer<double>::stream(s, indent + "  ", v.accelerateY);
    s << indent << "range: ";
    Printer<double>::stream(s, indent + "  ", v.range);
    s << indent << "coorX: ";
    Printer<double>::stream(s, indent + "  ", v.coorX);
    s << indent << "coorY: ";
    Printer<double>::stream(s, indent + "  ", v.coorY);
    s << indent << "amplitude: ";
    Printer<double>::stream(s, indent + "  ", v.amplitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IAU_ROS_MSGS_MESSAGE_RADARTARGET_H
