// Generated by gencpp from file iau_ros_msgs/Grid.msg
// DO NOT EDIT!


#ifndef IAU_ROS_MSGS_MESSAGE_GRID_H
#define IAU_ROS_MSGS_MESSAGE_GRID_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include "../msgHeader/PointXYA.h"

namespace iau_ros_msgs
{
template <class ContainerAllocator>
struct Grid_
{
  typedef Grid_<ContainerAllocator> Type;

  Grid_()
    : timestamp()
    , width(0)
    , height(0)
    , width_step(0.0)
    , height_step(0.0)
    , grid_nums(0)
    , grid()
    , enabled(0)
    , pos_vehicle()  {
    }
  Grid_(const ContainerAllocator& _alloc)
    : timestamp()
    , width(0)
    , height(0)
    , width_step(0.0)
    , height_step(0.0)
    , grid_nums(0)
    , grid(_alloc)
    , enabled(0)
    , pos_vehicle(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;

   typedef int32_t _width_type;
  _width_type width;

   typedef int32_t _height_type;
  _height_type height;

   typedef float _width_step_type;
  _width_step_type width_step;

   typedef float _height_step_type;
  _height_step_type height_step;

   typedef int32_t _grid_nums_type;
  _grid_nums_type grid_nums;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _grid_type;
  _grid_type grid;

   typedef int8_t _enabled_type;
  _enabled_type enabled;

   typedef  ::iau_ros_msgs::PointXYA_<ContainerAllocator>  _pos_vehicle_type;
  _pos_vehicle_type pos_vehicle;





  typedef boost::shared_ptr< ::iau_ros_msgs::Grid_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iau_ros_msgs::Grid_<ContainerAllocator> const> ConstPtr;

}; // struct Grid_

typedef ::iau_ros_msgs::Grid_<std::allocator<void> > Grid;

typedef boost::shared_ptr< ::iau_ros_msgs::Grid > GridPtr;
typedef boost::shared_ptr< ::iau_ros_msgs::Grid const> GridConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iau_ros_msgs::Grid_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iau_ros_msgs::Grid_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace iau_ros_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'iau_ros_msgs': ['/home/z/iau_ws/src/iau_ros_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::iau_ros_msgs::Grid_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iau_ros_msgs::Grid_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iau_ros_msgs::Grid_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iau_ros_msgs::Grid_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iau_ros_msgs::Grid_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iau_ros_msgs::Grid_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iau_ros_msgs::Grid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ec789739e2a01936ea531728fbd248c4";
  }

  static const char* value(const ::iau_ros_msgs::Grid_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xec789739e2a01936ULL;
  static const uint64_t static_value2 = 0xea531728fbd248c4ULL;
};

template<class ContainerAllocator>
struct DataType< ::iau_ros_msgs::Grid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iau_ros_msgs/Grid";
  }

  static const char* value(const ::iau_ros_msgs::Grid_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iau_ros_msgs::Grid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time       timestamp\n\
int32      width\n\
int32      height\n\
float32    width_step\n\
float32    height_step\n\
int32      grid_nums\n\
int8[]     grid\n\
int8       enabled\n\
PointXYA   pos_vehicle\n\
\n\
================================================================================\n\
MSG: iau_ros_msgs/PointXYA\n\
float64 x\n\
float64 y\n\
float64 yaw  # degs\n\
";
  }

  static const char* value(const ::iau_ros_msgs::Grid_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iau_ros_msgs::Grid_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.width_step);
      stream.next(m.height_step);
      stream.next(m.grid_nums);
      stream.next(m.grid);
      stream.next(m.enabled);
      stream.next(m.pos_vehicle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Grid_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iau_ros_msgs::Grid_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iau_ros_msgs::Grid_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
    s << indent << "width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
    s << indent << "width_step: ";
    Printer<float>::stream(s, indent + "  ", v.width_step);
    s << indent << "height_step: ";
    Printer<float>::stream(s, indent + "  ", v.height_step);
    s << indent << "grid_nums: ";
    Printer<int32_t>::stream(s, indent + "  ", v.grid_nums);
    s << indent << "grid[]" << std::endl;
    for (size_t i = 0; i < v.grid.size(); ++i)
    {
      s << indent << "  grid[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.grid[i]);
    }
    s << indent << "enabled: ";
    Printer<int8_t>::stream(s, indent + "  ", v.enabled);
    s << indent << "pos_vehicle: ";
    s << std::endl;
    Printer< ::iau_ros_msgs::PointXYA_<ContainerAllocator> >::stream(s, indent + "  ", v.pos_vehicle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IAU_ROS_MSGS_MESSAGE_GRID_H
